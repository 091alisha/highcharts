From 6e40a0c086be9e6f777369eec7b386c35d0ad3f9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Torstein=20H=C3=B8nsi?= <torstein@highsoft.com>
Date: Fri, 5 Aug 2016 13:23:55 +0200
Subject: [PATCH] Fixed #5565, X axis categories were not updated with point
 names on dynamic data.

---
 js/highcharts.src.js                       |  97 +++++++++++++++-------
 js/highmaps.src.js                         |  97 +++++++++++++++-------
 js/highstock.src.js                        |  99 ++++++++++++++++-------
 js/parts/Axis.js                           |  61 ++++++++++++++
 js/parts/Chart.js                          |   1 +
 js/parts/Point.js                          |   9 +--
 js/parts/Series.js                         |  24 +-----
 samples/unit-tests/axis/category/demo.html |   2 +-
 samples/unit-tests/axis/category/demo.js   | 126 +++++++++++++++++++++++++++++
 9 files changed, 399 insertions(+), 117 deletions(-)

diff --git a/js/highcharts.src.js b/js/highcharts.src.js
index 2881e5d..1b4a170 100644
--- a/js/highcharts.src.js
+++ b/js/highcharts.src.js
@@ -7786,6 +7786,67 @@
         },
 
         /**
+         * When a point name is given and no x, search for the name in the existing categories,
+         * or if categories aren't provided, search names or create a new category (#2522).
+         */
+        nameToX: function (point) {
+            var explicitCategories = isArray(this.categories),
+                names = explicitCategories ? this.categories : this.names,
+                nameX,
+                x;
+
+            point.series.requireSorting = false;
+            point.series.hasNames = true;
+            nameX = inArray(point.name, names); // #2522
+            if (nameX === -1) { // The name is not found in currenct categories
+                if (!explicitCategories) {
+                    x = names.length;
+                }
+            } else {
+                x = nameX;
+            }
+
+            // Write the last point's name to the names array
+            this.names[x] = point.name;
+
+            return x;
+        },
+
+        /**
+         * When changes have been done to series data, update the axis.names.
+         */
+        updateNames: function () {
+            var axis = this;
+
+            if (this.coll === 'xAxis') {
+                this.names.length = 0;
+                this.minRange = undefined;
+                each(this.series || [], function (series) {
+                    if (series.hasNames) {
+
+                        // When adding a series, points are not yet generated
+                        if (!series.processedXData) {
+                            series.processData();
+                            series.generatePoints();
+                        }
+
+                        each(series.points, function (point, i) {
+                            var x;
+                            if (point.options && point.options.x === undefined) {
+                                x = axis.nameToX(point);
+                                if (x !== point.x) {
+                                    point.x = x;
+                                    series.xData[i] = x;
+                                }
+                            }
+                        });
+
+                    }
+                });
+            }
+        },
+
+        /**
          * Update translation information
          */
         setAxisTranslation: function (saveOld) {
@@ -12297,6 +12358,7 @@
 
                     // set axes scales
                     each(axes, function (axis) {
+                        axis.updateNames();
                         axis.setScale();
                     });
                 }
@@ -13583,18 +13645,15 @@
             // If no x is set by now, get auto incremented value. All points must have an
             // x value, however the y value can be null to create a gap in the series
             if (point.x === undefined && series) {
-                if (x === undefined) {
+                if (point.name && x === undefined && series.xAxis && series.xAxis.categories) {
+                    point.x = series.xAxis.nameToX(point);
+                } else if (x === undefined) {
                     point.x = series.autoIncrement(point);
                 } else {
                     point.x = x;
                 }
             }
 
-            // Write the last point's name to the names array
-            if (series.xAxis && series.xAxis.names) {
-                series.xAxis.names[point.x] = point.name;
-            }
-
             return point;
         },
 
@@ -13959,38 +14018,18 @@
          * Return an auto incremented x value based on the pointStart and pointInterval options.
          * This is only used if an x value is not given for the point that calls autoIncrement.
          */
-        autoIncrement: function (point) {
+        autoIncrement: function () {
 
             var options = this.options,
                 xIncrement = this.xIncrement,
                 date,
                 pointInterval,
-                pointIntervalUnit = options.pointIntervalUnit,
-                xAxis = this.xAxis,
-                explicitCategories,
-                names,
-                nameX;
+                pointIntervalUnit = options.pointIntervalUnit;
 
             xIncrement = pick(xIncrement, options.pointStart, 0);
 
             this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);
 
-            // When a point name is given and no x, search for the name in the existing categories,
-            // or if categories aren't provided, search names or create a new category (#2522).
-            if (xAxis && xAxis.categories && point.name) {
-                this.requireSorting = false;
-                explicitCategories = isArray(xAxis.categories);
-                names = explicitCategories ? xAxis.categories : xAxis.names;
-                nameX = inArray(point.name, names); // #2522
-                if (nameX === -1) { // The name is not found in currenct categories
-                    if (!explicitCategories) {
-                        xIncrement = names.length;
-                    }
-                } else {
-                    xIncrement = nameX;
-                }
-            }
-
             // Added code for pointInterval strings
             if (pointIntervalUnit) {
                 date = new Date(xIncrement);
diff --git a/js/highmaps.src.js b/js/highmaps.src.js
index ea92e65..8a9f760 100644
--- a/js/highmaps.src.js
+++ b/js/highmaps.src.js
@@ -7512,6 +7512,67 @@
         },
 
         /**
+         * When a point name is given and no x, search for the name in the existing categories,
+         * or if categories aren't provided, search names or create a new category (#2522).
+         */
+        nameToX: function (point) {
+            var explicitCategories = isArray(this.categories),
+                names = explicitCategories ? this.categories : this.names,
+                nameX,
+                x;
+
+            point.series.requireSorting = false;
+            point.series.hasNames = true;
+            nameX = inArray(point.name, names); // #2522
+            if (nameX === -1) { // The name is not found in currenct categories
+                if (!explicitCategories) {
+                    x = names.length;
+                }
+            } else {
+                x = nameX;
+            }
+
+            // Write the last point's name to the names array
+            this.names[x] = point.name;
+
+            return x;
+        },
+
+        /**
+         * When changes have been done to series data, update the axis.names.
+         */
+        updateNames: function () {
+            var axis = this;
+
+            if (this.coll === 'xAxis') {
+                this.names.length = 0;
+                this.minRange = undefined;
+                each(this.series || [], function (series) {
+                    if (series.hasNames) {
+
+                        // When adding a series, points are not yet generated
+                        if (!series.processedXData) {
+                            series.processData();
+                            series.generatePoints();
+                        }
+
+                        each(series.points, function (point, i) {
+                            var x;
+                            if (point.options && point.options.x === undefined) {
+                                x = axis.nameToX(point);
+                                if (x !== point.x) {
+                                    point.x = x;
+                                    series.xData[i] = x;
+                                }
+                            }
+                        });
+                
+                    }
+                });
+            }
+        },
+
+        /**
          * Update translation information
          */
         setAxisTranslation: function (saveOld) {
@@ -11818,6 +11879,7 @@
 
                     // set axes scales
                     each(axes, function (axis) {
+                        axis.updateNames();
                         axis.setScale();
                     });
                 }
@@ -13064,18 +13126,15 @@
             // If no x is set by now, get auto incremented value. All points must have an
             // x value, however the y value can be null to create a gap in the series
             if (point.x === undefined && series) {
-                if (x === undefined) {
+                if (point.name && x === undefined && series.xAxis && series.xAxis.categories) {
+                    point.x = series.xAxis.nameToX(point);
+                } else if (x === undefined) {
                     point.x = series.autoIncrement(point);
                 } else {
                     point.x = x;
                 }
             }
 
-            // Write the last point's name to the names array
-            if (series.xAxis && series.xAxis.names) {
-                series.xAxis.names[point.x] = point.name;
-            }
-
             return point;
         },
 
@@ -13440,38 +13499,18 @@
          * Return an auto incremented x value based on the pointStart and pointInterval options.
          * This is only used if an x value is not given for the point that calls autoIncrement.
          */
-        autoIncrement: function (point) {
+        autoIncrement: function () {
 
             var options = this.options,
                 xIncrement = this.xIncrement,
                 date,
                 pointInterval,
-                pointIntervalUnit = options.pointIntervalUnit,
-                xAxis = this.xAxis,
-                explicitCategories,
-                names,
-                nameX;
+                pointIntervalUnit = options.pointIntervalUnit;
 
             xIncrement = pick(xIncrement, options.pointStart, 0);
 
             this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);
 
-            // When a point name is given and no x, search for the name in the existing categories,
-            // or if categories aren't provided, search names or create a new category (#2522).
-            if (xAxis && xAxis.categories && point.name) {
-                this.requireSorting = false;
-                explicitCategories = isArray(xAxis.categories);
-                names = explicitCategories ? xAxis.categories : xAxis.names;
-                nameX = inArray(point.name, names); // #2522
-                if (nameX === -1) { // The name is not found in currenct categories
-                    if (!explicitCategories) {
-                        xIncrement = names.length;
-                    }
-                } else {
-                    xIncrement = nameX;
-                }
-            }
-
             // Added code for pointInterval strings
             if (pointIntervalUnit) {
                 date = new Date(xIncrement);
diff --git a/js/highstock.src.js b/js/highstock.src.js
index dc11b30..60741df 100644
--- a/js/highstock.src.js
+++ b/js/highstock.src.js
@@ -7786,6 +7786,67 @@
         },
 
         /**
+         * When a point name is given and no x, search for the name in the existing categories,
+         * or if categories aren't provided, search names or create a new category (#2522).
+         */
+        nameToX: function (point) {
+            var explicitCategories = isArray(this.categories),
+                names = explicitCategories ? this.categories : this.names,
+                nameX,
+                x;
+
+            point.series.requireSorting = false;
+            point.series.hasNames = true;
+            nameX = inArray(point.name, names); // #2522
+            if (nameX === -1) { // The name is not found in currenct categories
+                if (!explicitCategories) {
+                    x = names.length;
+                }
+            } else {
+                x = nameX;
+            }
+
+            // Write the last point's name to the names array
+            this.names[x] = point.name;
+
+            return x;
+        },
+
+        /**
+         * When changes have been done to series data, update the axis.names.
+         */
+        updateNames: function () {
+            var axis = this;
+
+            if (this.coll === 'xAxis') {
+                this.names.length = 0;
+                this.minRange = undefined;
+                each(this.series || [], function (series) {
+                    if (series.hasNames) {
+
+                        // When adding a series, points are not yet generated
+                        if (!series.processedXData) {
+                            series.processData();
+                            series.generatePoints();
+                        }
+
+                        each(series.points, function (point, i) {
+                            var x;
+                            if (point.options && point.options.x === undefined) {
+                                x = axis.nameToX(point);
+                                if (x !== point.x) {
+                                    point.x = x;
+                                    series.xData[i] = x;
+                                }
+                            }
+                        });
+
+                    }
+                });
+            }
+        },
+
+        /**
          * Update translation information
          */
         setAxisTranslation: function (saveOld) {
@@ -12297,6 +12358,7 @@
 
                     // set axes scales
                     each(axes, function (axis) {
+                        axis.updateNames();
                         axis.setScale();
                     });
                 }
@@ -13583,18 +13645,15 @@
             // If no x is set by now, get auto incremented value. All points must have an
             // x value, however the y value can be null to create a gap in the series
             if (point.x === undefined && series) {
-                if (x === undefined) {
+                if (point.name && x === undefined && series.xAxis && series.xAxis.categories) {
+                    point.x = series.xAxis.nameToX(point);
+                } else if (x === undefined) {
                     point.x = series.autoIncrement(point);
                 } else {
                     point.x = x;
                 }
             }
 
-            // Write the last point's name to the names array
-            if (series.xAxis && series.xAxis.names) {
-                series.xAxis.names[point.x] = point.name;
-            }
-
             return point;
         },
 
@@ -13959,38 +14018,18 @@
          * Return an auto incremented x value based on the pointStart and pointInterval options.
          * This is only used if an x value is not given for the point that calls autoIncrement.
          */
-        autoIncrement: function (point) {
+        autoIncrement: function () {
 
             var options = this.options,
                 xIncrement = this.xIncrement,
                 date,
                 pointInterval,
-                pointIntervalUnit = options.pointIntervalUnit,
-                xAxis = this.xAxis,
-                explicitCategories,
-                names,
-                nameX;
+                pointIntervalUnit = options.pointIntervalUnit;
 
             xIncrement = pick(xIncrement, options.pointStart, 0);
 
             this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);
 
-            // When a point name is given and no x, search for the name in the existing categories,
-            // or if categories aren't provided, search names or create a new category (#2522).
-            if (xAxis && xAxis.categories && point.name) {
-                this.requireSorting = false;
-                explicitCategories = isArray(xAxis.categories);
-                names = explicitCategories ? xAxis.categories : xAxis.names;
-                nameX = inArray(point.name, names); // #2522
-                if (nameX === -1) { // The name is not found in currenct categories
-                    if (!explicitCategories) {
-                        xIncrement = names.length;
-                    }
-                } else {
-                    xIncrement = nameX;
-                }
-            }
-
             // Added code for pointInterval strings
             if (pointIntervalUnit) {
                 date = new Date(xIncrement);
@@ -821,6 +821,67 @@ Axis.prototype = {
 	},
 
 	/**
+	 * When a point name is given and no x, search for the name in the existing categories,
+	 * or if categories aren't provided, search names or create a new category (#2522).
+	 */
+	nameToX: function (point) {
+		var explicitCategories = isArray(this.categories),
+			names = explicitCategories ? this.categories : this.names,
+			nameX,
+			x;
+
+		point.series.requireSorting = false;
+		point.series.hasNames = true;
+		nameX = inArray(point.name, names); // #2522
+		if (nameX === -1) { // The name is not found in currenct categories
+			if (!explicitCategories) {
+				x = names.length;
+			}
+		} else {
+			x = nameX;
+		}
+
+		// Write the last point's name to the names array
+		this.names[x] = point.name;
+
+		return x;
+	},
+
+	/**
+	 * When changes have been done to series data, update the axis.names.
+	 */
+	updateNames: function () {
+		var axis = this;
+
+		if (this.coll === 'xAxis') {
+			this.names.length = 0;
+			this.minRange = undefined;
+			each(this.series || [], function (series) {
+				if (series.hasNames) {
+
+					// When adding a series, points are not yet generated
+					if (!series.processedXData) {
+						series.processData();
+						series.generatePoints();
+					}
+
+					each(series.points, function (point, i) {
+						var x;
+						if (point.options && point.options.x === undefined) {
+							x = axis.nameToX(point);
+							if (x !== point.x) {
+								point.x = x;
+								series.xData[i] = x;
+							}
+						}
+					});
+
+				}
+			});
+		}
+	},
+
+	/**
 	 * Update translation information
 	 */
 	setAxisTranslation: function (saveOld) {
diff --git a/js/parts/Chart.js b/js/parts/Chart.js
index 10cf8e0..a5e72b7 100644
--- a/js/parts/Chart.js
+++ b/js/parts/Chart.js
@@ -259,6 +259,7 @@ Chart.prototype = {
 
 				// set axes scales
 				each(axes, function (axis) {
+					axis.updateNames();
 					axis.setScale();
 				});
 			}
diff --git a/js/parts/Point.js b/js/parts/Point.js
index 66eeab2..e263574 100644
--- a/js/parts/Point.js
+++ b/js/parts/Point.js
@@ -56,18 +56,15 @@ Point.prototype = {
 		// If no x is set by now, get auto incremented value. All points must have an
 		// x value, however the y value can be null to create a gap in the series
 		if (point.x === undefined && series) {
-			if (x === undefined) {
+			if (point.name && x === undefined && series.xAxis && series.xAxis.categories) {
+				point.x = series.xAxis.nameToX(point);
+			} else if (x === undefined) {
 				point.x = series.autoIncrement(point);
 			} else {
 				point.x = x;
 			}
 		}
 
-		// Write the last point's name to the names array
-		if (series.xAxis && series.xAxis.names) {
-			series.xAxis.names[point.x] = point.name;
-		}
-
 		return point;
 	},
 
diff --git a/js/parts/Series.js b/js/parts/Series.js
index 06ee1de..3eabeea 100644
--- a/js/parts/Series.js
+++ b/js/parts/Series.js
@@ -177,38 +177,18 @@ Series.prototype = {
 	 * Return an auto incremented x value based on the pointStart and pointInterval options.
 	 * This is only used if an x value is not given for the point that calls autoIncrement.
 	 */
-	autoIncrement: function (point) {
+	autoIncrement: function () {
 
 		var options = this.options,
 			xIncrement = this.xIncrement,
 			date,
 			pointInterval,
-			pointIntervalUnit = options.pointIntervalUnit,
-			xAxis = this.xAxis,
-			explicitCategories,
-			names,
-			nameX;
+			pointIntervalUnit = options.pointIntervalUnit;
 
 		xIncrement = pick(xIncrement, options.pointStart, 0);
 
 		this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);
 
-		// When a point name is given and no x, search for the name in the existing categories,
-		// or if categories aren't provided, search names or create a new category (#2522).
-		if (xAxis && xAxis.categories && point.name) {
-			this.requireSorting = false;
-			explicitCategories = isArray(xAxis.categories);
-			names = explicitCategories ? xAxis.categories : xAxis.names;
-			nameX = inArray(point.name, names); // #2522
-			if (nameX === -1) { // The name is not found in currenct categories
-				if (!explicitCategories) {
-					xIncrement = names.length;
-				}
-			} else {
-				xIncrement = nameX;
-			}
-		}
-
 		// Added code for pointInterval strings
 		if (pointIntervalUnit) {
 			date = new Date(xIncrement);
diff --git a/samples/unit-tests/axis/category/demo.html b/samples/unit-tests/axis/category/demo.html
index 08bb7c4..d1565e7 100644
--- a/samples/unit-tests/axis/category/demo.html
+++ b/samples/unit-tests/axis/category/demo.html
@@ -4,4 +4,4 @@
 <div id="qunit"></div>
 <div id="qunit-fixture"></div>
 
-<div id="container" style="width: 600px; margin: 0 auto"></div>
\ No newline at end of file
+<div id="container" style="width: 600px; height: 250px; margin: 0 auto"></div>
\ No newline at end of file
diff --git a/samples/unit-tests/axis/category/demo.js b/samples/unit-tests/axis/category/demo.js
index 18f6aa0..6448bd1 100644
--- a/samples/unit-tests/axis/category/demo.js
+++ b/samples/unit-tests/axis/category/demo.js
@@ -105,3 +105,129 @@ QUnit.test('Categories defined, points go in right category', function (assert)
         'Second series, first point, lands at 1 because name exists in categories'
     );
 });
+
+QUnit.test('Keeping names updated with dynamic data', function (assert) {
+    var chart = Highcharts.chart('container', {
+
+        chart: {
+            animation: false,
+            type: 'column'
+        },
+
+        xAxis: {
+            type: 'category'
+        },
+
+        plotOptions: {
+            series: {
+                animation: false
+            }
+        },
+
+        series: [{
+            name: 'First',
+            data: [{
+                name: 'Apples',
+                y: 3
+            }, {
+                name: 'Pears',
+                y: 2
+            }, {
+                name: 'Oranges',
+                y: 4
+            }]
+        }, {
+            name: 'Second',
+            data: [{
+                name: 'Oranges',
+                y: 2
+            }, {
+                name: 'Bananas',
+                y: 2
+            }]
+        }]
+
+    });
+
+    var names = chart.xAxis[0].names;
+    assert.strictEqual(
+        names.toString(),
+        'Apples,Pears,Oranges,Bananas',
+        'Initial'
+    );
+
+
+    chart.series[0].remove();
+    assert.strictEqual(
+        names.toString(),
+        'Oranges,Bananas',
+        'Series.remove'
+    );
+
+    chart.addSeries({
+        name: 'Added',
+        data: [{
+            name: 'Addid1',
+            y: 2
+        }, {
+            name: 'Addid2',
+            y: 2
+        }],
+        type: 'column'
+    });
+    assert.strictEqual(
+        names.toString(),
+        'Oranges,Bananas,Addid1,Addid2',
+        'Chart.addSeries'
+    );
+
+
+    chart.series[0].setData([{
+        name: 'Setta1',
+        y: 2
+    }, {
+        name: 'Setta2',
+        y: 2
+    }]);
+
+    assert.strictEqual(
+        names.toString(),
+        'Setta1,Setta2,Addid1,Addid2',
+        'Series.setData'
+    );
+
+    chart.series[0].update({
+        name: 'Updated',
+        data: [{
+            name: 'Upda1',
+            y: 2
+        }, {
+            name: 'Upda2',
+            y: 2
+        }]
+    });
+
+    assert.strictEqual(
+        names.toString(),
+        'Addid1,Addid2,Upda1,Upda2', // Note that xAxis.series order gets changed when series.update. It may be considered a bug.
+        'Series.update'
+    );
+
+    chart.series[0].points[0].update({
+        name: 'UpdatPoint',
+        y: 2
+    });
+
+    assert.strictEqual(
+        names.toString(),
+        'Addid1,Addid2,UpdatPoint,Upda2',
+        'Point.update'
+    );
+
+    chart.series[0].points[0].remove();
+    assert.strictEqual(
+        names.toString(),
+        'Addid1,Addid2,Upda2',
+        'Point.remove'
+    );
+});
