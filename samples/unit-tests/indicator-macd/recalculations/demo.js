
QUnit.test('Test algorithm on data updates.', function (assert) {

    var chart = Highcharts.stockChart('container', {
            yAxis:[{
                height: '50%'
            },{
                top: '60%',
                height: '40%'
            }],
            series: [{
                id: 'main',
                type: 'candlestick',
                data: [
                    [0,16.3,16.51,16.16,16.39],
                    [1,16.415,16.51,16.37,16.4999],
                    [2,16.4999,16.56,16.42,16.45],
                    [3,16.453,16.55,16.43,16.43],
                    [4,16.46,16.55,16.4,16.52],
                    [5,16.56,16.56,16.44,16.51],
                    [6,16.51,16.54,16.423,16.423],
                    [7,16.4025,16.47,16.38,16.41],
                    [8,16.43,16.5068,16.39,16.47],
                    [9,16.463,16.49,16.433,16.45],
                    [10,16.46,16.49,16.3,16.32],
                    [11,16.31,16.43,16.31,16.36],
                    [12,16.36,16.47,16.3,16.34],
                    [13,16.47,16.68,16.305,16.59],
                    [14,16.57,16.64,16.51,16.54],
                    [15,16.54,16.56,16.46,16.52],
                    [16,16.5,16.52,16.435,16.44],
                    [17,16.44,16.54,16.44,16.47],
                    [18,16.47,16.5,16.45,16.5],
                    [19,16.49,16.542,16.41,16.45],
                    [20,16.42,16.45,16.28,16.28],
                    [21,16.27,16.31,16.07,16.07],
                    [22,16.108,16.108,16.01,16.08],
                    [23,16.09,16.13,16.02,16.1],
                    [24,16.1,16.18,16.08,16.1],
                    [25,16.1,16.23,16.05,16.09],
                    [26,16.7,16.79,16.24,16.43],
                    [27,16.48,16.56,16.41,16.4899],
                    [28,16.48,16.61,16.47,16.59],
                    [29,16.62,16.68,16.58,16.65],
                    [30,16.69,16.78,16.65,16.78],
                    [31,16.78,16.86,16.75,16.86],
                    [32,16.85,16.89,16.84,16.86],
                    [33,16.84,16.89,16.76,16.76]
                ]
            }, {
                yAxis: 1,
                type: 'macd',
                linkedTo: 'main',
                params: {
                    standardDeviation: 3
                }
            }]
        });
    
    console.log(chart.series[1].yData);

    //map = Highcharts.map;

    /*function arrToPrecision (arr) {
        var precision = 1e4;

        return map(arr, function (point) {
            return map(point, Math.round);
        });

    }

    assert.strictEqual(
        chart.series[0].points.length,
        chart.series[1].points.length + chart.series[1].options.params.period - 1,
        'Initial number of Bollinger Bands points is correct'
    );

    chart.series[0].addPoint([5, 45, 46, 43, 44]);

    assert.strictEqual(
        chart.series[0].points.length,
        chart.series[1].points.length + chart.series[1].options.params.period - 1,
        'After addPoint number of Bollinger Bands points is correct'
    );

    chart.series[0].setData([
        [0, 10000, 20000, 10000, 14970],
        [1, 10000, 20000, 10000, 15021],
        [2, 10000, 20000, 10000, 15099],
        [3, 10000, 20000, 10000, 15029],
        [4, 10000, 20000, 10000, 15133],
        [5, 10000, 20000, 10000, 15038],
        [6, 10000, 20000, 10000, 15011],
        [7, 10000, 20000, 10000, 14963],
        [8, 10000, 20000, 10000, 15063],
        [9, 10000, 20000, 10000, 15203],
        [10, 10000, 20000, 10000, 15045],
        [11, 10000, 20000, 10000, 15234],
        [12, 10000, 20000, 10000, 15312],
        [13, 10000, 20000, 10000, 15247],
        [14, 10000, 20000, 10000, 15013],
        [15, 10000, 20000, 10000, 15107],
        [16, 10000, 20000, 10000, 15020],
        [17, 10000, 20000, 10000, 14895],
        [18, 10000, 20000, 10000, 14846],
        [19, 10000, 20000, 10000, 14898],
        [20, 10000, 20000, 10000, 14988],
        [21, 10000, 20000, 10000, 15083],
        [22, 10000, 20000, 10000, 15193],
        [23, 10000, 20000, 10000, 15292],
        [24, 10000, 20000, 10000, 15199],
        [25, 10000, 20000, 10000, 15280],
        [26, 10000, 20000, 10000, 15236],
        [27, 10000, 20000, 10000, 15218]
    ], false);
    chart.series[1].update({
        topLine: {
            styles: {
                lineColor: 'red'
            }
        },
        bottomLine: {
            styles: {
                lineColor: 'blue'
            }
        },
        params: {
            period: 20,
            standardDeviation: 2
        }
    });

    assert.deepEqual(
        arrToPrecision(chart.series[1].yData),
        [
            [15302, 15057, 14813],
            [15302, 15058, 14815],
            [15304, 15061, 14818],
            [15316, 15066, 14816],
            [15348, 15079, 14811],
            [15355, 15083, 14810],
            [15380, 15095, 14809],
            [15395, 15106, 14816],
            [15404, 15119, 14833]
        ],
        'Correct values'
    );

    assert.strictEqual(
        chart.series[1].graphtopLine.attr('stroke'),
        'red',
        'Line color changed'
    );

    assert.strictEqual(
        chart.series[1].graphbottomLine.attr('stroke'),
        'blue',
        'Line color changed'
    );

    chart.series[0].points[27].remove();

    assert.deepEqual(
        arrToPrecision(chart.series[1].yData),
        [
            [15302, 15057, 14813],
            [15302, 15058, 14815],
            [15304, 15061, 14818],
            [15316, 15066, 14816],
            [15348, 15079, 14811],
            [15355, 15083, 14810],
            [15380, 15095, 14809],
            [15395, 15106, 14816]
        ],
        'Correct values after point.remove()'
    );*/
});
